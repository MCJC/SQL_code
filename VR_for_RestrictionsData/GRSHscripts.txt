/*** ------------------------------------------------------------------------------------------------------------------------------------------------------- ***/    
/*** --------------                                      files involved in: Restrictions Data processing                                      -------------- ***/   
/*** ------------------------------------------------------------------------------------------------------------------------------------------------------- ***/   
 
 
/***=========================================================================================================================================================***/   
/*** ------------------------------------------------------------------------------------------------------------------------------------------------------- ***/   
 
 
 
  _001_lt__NatLocTOOL_____R.sql                                                                                                                                    
 
 
 
/*** ------------------------------------------------------------------------------------------------------------------------------------------------------- ***/   
/***=========================================================================================================================================================***/   
 
 
/***************************************************************************************************************************************************************/
Print 
'--- ' + CONVERT (VARCHAR(19), SYSDATETIME()) + ' ==>  script 001    ------------------------------------------------------------------------------------------ '
/***************************************************************************************************************************************************************/
/***                                                                                                                                            ***/
/***     >>>>>         This script creates a lookup table of countries and the locality used for coding events                        <<<<<     ***/
/***                                                                                                                                            ***/
/***                                               > > >     lookup tables  work faster     < < <                                               ***/
/**************************************************************************************************************************************************/
USE [forum_ResAnal]
GO
/**************************************************************************************************************************************************/
/*------------------------------------------------------------------------------------------------------------------------------------------------*/
IF OBJECT_ID  (N'[forum_ResAnal].[dbo].[vr___0______NationLocalityTOOL]', N'U') IS NOT NULL
DROP TABLE       [forum_ResAnal].[dbo].[vr___0______NationLocalityTOOL]
/*------------------------------------------------------------------------------------------------------------------------------------------------*/
SELECT * 	INTO [forum_ResAnal].[dbo].[vr___0______NationLocalityTOOL]
FROM
/*------------------------------------------------------------------------------------------------------------------------------------------------*/
(
/*** Set of data at country/province level ********************************************************************************************************/
SELECT
           distinct
          [Nation_fk]     = N.[Nation_pk]
      ,   [Locality_fk]   = L.[Locality_pk]
      , L.[Locality]
  FROM [forum].[dbo].[Pew_Q&A]               Q
      ,[forum].[dbo].[Pew_Locality]          L
      ,[forum].[dbo].[Pew_Nation]            N
      ,[forum].[dbo].[Pew_Locality_Answer]   KL
WHERE Q.[Answer_fk]   = KL.[Answer_fk]
  AND L.[Locality_pk] = KL.[Locality_fk]
                                /* No need of change in order to keep consistency of 2012: 
                                   Data by Province currently belonging to South Sudan
                                   should considered data for Sudan before 2010             */
  AND N.[Nation_pk]   =  L.[Nation_fk]
                                /* In order to avoid changing the final set,
                                   Data previously used for Northern Cyprus
                                   should be excluded                                       */
                                /* Although we have REAL data by province for North Korea,
                                   we will not use them in this analysis                    */
                                /* Pull only data on Restrictions                           */
  AND Q.[Pew_Data_Collection] = 'Global Restriction on Religion Study'
  AND Q.[Question_Year] = 2012
                                /* redundant filters                                        */
  AND
    (    Q.[Question_abbreviation_std]   LIKE 'GRI_19_[b-f]'
      OR Q.[Question_abbreviation_std]   LIKE 'SHI_0[1, 4, 5]_[b-f]'   )
/******************************************************************************************************** Set of data at country/province level ***/
) AS CPL
/**************************************************************************************************************************************************/
GO
/**************************************************************************************************************************************************/
 
 
 
 
/***                                                                           -o-                                                                           ***/   
 
 
 
 
/***=========================================================================================================================================================***/   
/*** ------------------------------------------------------------------------------------------------------------------------------------------------------- ***/   
 
 
 
  _002_lt__QstRelTOOL_____R.sql                                                                                                                                    
 
 
 
/*** ------------------------------------------------------------------------------------------------------------------------------------------------------- ***/   
/***=========================================================================================================================================================***/   
 
 
/***************************************************************************************************************************************************************/
Print 
'--- ' + CONVERT (VARCHAR(19), SYSDATETIME()) + ' ==>  script 002    ------------------------------------------------------------------------------------------ '
/***************************************************************************************************************************************************************/
/***                                                                                                                                            ***/
/***     >>>>>         This script creates a lookup table of questions on specific religion groups including groups' ID               <<<<<     ***/
/***                                                                                                                                            ***/
/***                                               > > >     lookup tables  work faster     < < <                                               ***/
/**************************************************************************************************************************************************/
USE [forum_ResAnal]
GO
/**************************************************************************************************************************************************/
/*------------------------------------------------------------------------------------------------------------------------------------------------*/
IF OBJECT_ID  (N'[forum_ResAnal].[dbo].[vr___0______QuestnReligionTOOL]', N'U') IS NOT NULL
DROP TABLE       [forum_ResAnal].[dbo].[vr___0______QuestnReligionTOOL]
/*------------------------------------------------------------------------------------------------------------------------------------------------*/
SELECT * 	INTO [forum_ResAnal].[dbo].[vr___0______QuestiReligionTOOL]
FROM
/*------------------------------------------------------------------------------------------------------------------------------------------------*/
(
/*** Set of data at country/religious group level *************************************************************************************************/
SELECT
           DISTINCT
           Religion_fk = G.[Religion_group_pk]
      ,    Religion    = G.[Pew_religion]
      ,    QA_std      = Q.[Question_abbreviation_std]
      ,    QW_std      = Q.[Question_short_wording_std]
  FROM [forum].[dbo].[Pew_Q&A]                      Q
      ,[forum].[dbo].[Pew_Nation]                   N
      ,[forum].[dbo].[Pew_Religion_Group]           G
      ,[forum].[dbo].[Pew_Nation_Religion_Answer]   KR
WHERE Q.[Answer_fk]           = KR.[Answer_fk]
  AND KR.[Religion_group_fk]  =  G.[Religion_group_pk]
  AND  N.[Nation_pk]          = KR.[Nation_fk]
                                /* Pull only data on Restrictions */
  AND Q.[Pew_Data_Collection] = 'Global Restriction on Religion Study'

  AND Q.[Question_Year] = 2012
                                /* redundant filters                                        */
  AND
    (    Q.[Question_abbreviation_std]   LIKE 'GRI_11_%'
      OR Q.[Question_abbreviation_std]   LIKE 'GRI_20_01x%'
      OR Q.[Question_abbreviation_std]   LIKE 'SHI_01_x%'              )
/************************************************************************************************* Set of data at country/religious group level ***/
) AS CRL
/**************************************************************************************************************************************************/
GO
/**************************************************************************************************************************************************/
 
 
 
 
/***                                                                           -o-                                                                           ***/   
 
 
 
 
/***=========================================================================================================================================================***/   
/*** ------------------------------------------------------------------------------------------------------------------------------------------------------- ***/   
 
 
 
  _003_lt__DBLongNoAggr___R.sql                                                                                                                                    
 
 
 
/*** ------------------------------------------------------------------------------------------------------------------------------------------------------- ***/   
/***=========================================================================================================================================================***/   
 
 
/***************************************************************************************************************************************************************/
Print 
'--- ' + CONVERT (VARCHAR(19), SYSDATETIME()) + ' ==>  script 003    ------------------------------------------------------------------------------------------ '
/***************************************************************************************************************************************************************/
/***                                                                                                                                            ***/
/***     >>>>>         This script creates long set of data from the 'Global Restriction on Religion Study'                           <<<<<     ***/
/***                   The long set of data includes numeric values and descriptive wordings for GR&SH R                                        ***/
/***                                                                                                                                            ***/
/**************************************************************************************************************************************************/
USE [forum_ResAnal]
GO
/**************************************************************************************************************************************************/
IF OBJECT_ID  (N'[forum_ResAnal].[dbo].[vr___01_cDB_Long__NoAggregated]', N'U') IS NOT NULL
DROP TABLE       [forum_ResAnal].[dbo].[vr___01_cDB_Long__NoAggregated]
GO
IF OBJECT_ID  (N'[forum_ResAnal].[dbo].[NewTempTab1]'                , N'U') IS NOT NULL
DROP TABLE       [forum_ResAnal].[dbo].[NewTempTab1]
IF OBJECT_ID  (N'[forum_ResAnal].[dbo].[NewTempTab2]'                , N'U') IS NOT NULL
DROP TABLE       [forum_ResAnal].[dbo].[NewTempTab2]
IF OBJECT_ID  (N'[forum_ResAnal].[dbo].[NewTempTab3]'                , N'U') IS NOT NULL
DROP TABLE       [forum_ResAnal].[dbo].[NewTempTab3]
GO
/**************************************************************************************************************************************************/
ExtractGRSH 'Ctry', '[FORUM]..[Pew_Nation_Answer]'         , '[NewTempTab1]'
GO 
ExtractGRSH 'Prov', '[FORUM]..[Pew_Locality_Answer]'       , '[NewTempTab2]'
GO 
ExtractGRSH 'RGrp', '[FORUM]..[Pew_Nation_Religion_Answer]', '[NewTempTab3]'
GO 
/**************************************************************************************************************************************************/
/*------------------------------------------------------------------------------------------------------------------------------------------------*/
SELECT *
 INTO                   [vr___01_cDB_Long__NoAggregated]
 FROM
       (
          SELECT * FROM [NewTempTab1]
          UNION ALL 
          SELECT * FROM [NewTempTab2]
          UNION ALL
          SELECT * FROM [NewTempTab3]
                                       ) TempTabs
/*  >   filters  ---------------------------------------------------------------------------------------------------------------------------------*/
WHERE
Ctry_EditorialName                                 != 'North Korea'        /* Excluded from the analysis                                          */
AND
Ctry_EditorialName +'_/_'+ STR(Question_Year, 4,0) != 'South Sudan_/_2010' /* although data are not aggregated for the other part of former Sudan */
AND
QA_std                                 NOT LIKE       '%_d'+ '[a,b]'       /* exclude all da/db counts from 2010                                  */
/*  <   filters  ---------------------------------------------------------------------------------------------------------------------------------*/
/**************************************************************************************************************************************************/
GO
/**************************************************************************************************************************************************/
IF OBJECT_ID  (N'[forum_ResAnal].[dbo].[NewTempTab1]'                , N'U') IS NOT NULL
DROP TABLE       [forum_ResAnal].[dbo].[NewTempTab1]
IF OBJECT_ID  (N'[forum_ResAnal].[dbo].[NewTempTab2]'                , N'U') IS NOT NULL
DROP TABLE       [forum_ResAnal].[dbo].[NewTempTab2]
IF OBJECT_ID  (N'[forum_ResAnal].[dbo].[NewTempTab3]'                , N'U') IS NOT NULL
DROP TABLE       [forum_ResAnal].[dbo].[NewTempTab3]
/**************************************************************************************************************************************************/
GO
/**************************************************************************************************************************************************/
 
 
 
 
/***                                                                           -o-                                                                           ***/   
 
 
 
 
/***=========================================================================================================================================================***/   
/*** ------------------------------------------------------------------------------------------------------------------------------------------------------- ***/   
 
 
 
  _004_lt__DBWide_byCnY___R.sql                                                                                                                                    
 
 
 
/*** ------------------------------------------------------------------------------------------------------------------------------------------------------- ***/   
/***=========================================================================================================================================================***/   
 
 
/***************************************************************************************************************************************************************/
Print 
'--- ' + CONVERT (VARCHAR(19), SYSDATETIME()) + ' ==>  script 004    ------------------------------------------------------------------------------------------ '
/***************************************************************************************************************************************************************/
/***                                                                                                                                                         ***/
/***     >>>>>         This script creates semi-WIDE set of STORED data from the 'Global Restriction on Religion Study'                            <<<<<     ***/
/***                    -  Data of each row are by country-year                                                                                              ***/
/***                    -  Any wide/semi-wide set of data includes only numeric values for GR&SH R                                                           ***/
/***                                                                                                                                                         ***/
/***************************************************************************************************************************************************************/
USE [forum_ResAnal]
GO
/***************************************************************************************************************************************************************/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/***************************************************************************************************************************************************************/
declare @ALLCODE nvarchar(max)
/***************************************************************************************************************************************************************/
set     @ALLCODE = 
/***************************************************************************************************************************************************************/
N'
IF OBJECT_ID (N''[forum_ResAnal].[dbo].[vr___02_cDB_Wide__by_Ctry&Year]'', N''U'') IS NOT NULL
DROP TABLE       [forum_ResAnal].[dbo].[vr___02_cDB_Wide__by_Ctry&Year]
SELECT * INTO    [forum_ResAnal].[dbo].[vr___02_cDB_Wide__by_Ctry&Year]
FROM
'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***  Long NPR aggregated by country and null values recoded as zero in known count variables  *****************************************************************/
N'
(
/***************************************************************************************************************************************************************/
SELECT 
       [Nation_fk]
      ,[Region5]
      ,[Region6]
      ,[Ctry_EditorialName]
      ,[Question_Year]
'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
(                                                                                /*** parenthesis to include query for the cell to be stuffed                ***/
/***************************************************************************************************************************************************************/
/*** Begin selection (into text, in a cell) of a comma delimited list of fields from a system view *************************************************************/
/***************************************************************************************************************************************************************/
    SELECT                                                                      /*** SELECT statement (notice THERE IS alias for the recoded field           ***/
          DISTINCT                                                              /*** should be distinct to include once each variable name                   ***/
          CASE                                                                  /*** CASE to select two different wordings...                                ***/
          WHEN        [QA_std]     LIKE 'GRI_19_[b-f]'                          /*** when count variables GRI_19                                             ***/
                 OR   [QA_std]     LIKE 'SHI_01_[b-f]'                          /*** or   count variables SHI_01                                             ***/
                 OR   [QA_std]     LIKE 'SHI_04_[b-f]'                          /*** or   count variables SHI_04                                             ***/
                 OR   [QA_std]     LIKE 'SHI_05_[c-f]'                          /*** or   count variables SHI_05                                             ***/
          THEN ', ' + [QA_std] + ' = ISNULL(' + [QA_std] + ', 0)'               /*** as comma delimited code to include null values as ceros                 ***/
          ELSE ', ' + [QA_std]                                                  /*** else comma delimited field for all other QA Std (StdVarName)            ***/
          END                                                                   /*** end of CASE section, used to include two different wordings             ***/
    FROM                                                                        /*** from...                                                                 ***/
          [vr___01_cDB_Long__NoAggregated]                                      /*** name of the table which includes all field (var) names as rows          ***/
                                                                                /*** NO FILTERS needed                                                       ***/
         ORDER BY                                                               /*** sorting order using exact final field, including:                       ***/
          CASE                                                                  /*** CASE to sort using two different wordings...                            ***/
          WHEN        [QA_std]     LIKE 'GRI_19_[b-f]'                          /*** when count variables GRI_19                                             ***/
                 OR   [QA_std]     LIKE 'SHI_01_[b-f]'                          /*** or   count variables SHI_01                                             ***/
                 OR   [QA_std]     LIKE 'SHI_04_[b-f]'                          /*** or   count variables SHI_04                                             ***/
                 OR   [QA_std]     LIKE 'SHI_05_[c-f]'                          /*** or   count variables SHI_05                                             ***/
          THEN ', ' + [QA_std] + ' = ISNULL(' + [QA_std] + ', 0)'               /*** as comma delimited code to include null values as ceros                 ***/
          ELSE ', ' + [QA_std]                                                  /*** else comma delimited field for all other QA Std (StdVarName)            ***/
          END                                                                   /*** end of CASE, used to sort list of fields by two different wordings      ***/
         for xml path('')                                                       /*** Modifies the selected rowset nesting all cells into an XML string cell  ***/
/***************************************************************************************************************************************************************/
/*** End of the selection (into text, in a cell) of a comma delimited list of fields ***************************************************************************/
/***************************************************************************************************************************************************************/
)                                                                                /*** parenthesis to include query for the cell to be stuffed                ***/
/***************************************************************************************************************************************************************/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***  all this from...  ****************************************************************************************************************************************/
N'
FROM ( 
'
/****************************************************************************************************************************************  all this from...  ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***  Long NPR aggregated by country (& religion due to variable names)  ***************************************************************************************/
N'
SELECT 
       [Nation_fk]
      ,[Region5]
      ,[Region6]
      ,[Ctry_EditorialName]
      ,[Question_Year]
      ,[QA_std]
      ,[Answer_value]      = SUM([Answer_value])
  FROM
            [vr___01_cDB_Long__NoAggregated]
GROUP BY
       [Nation_fk]
      ,[Region5]
      ,[Region6]
      ,[Ctry_EditorialName]
      ,[Question_Year]
      ,[QA_std]
)                                                                                                                                                      AS   lnpr
'
/***************************************************************************************  Long NPR aggregated by country (& religion due to variable names)  ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***************************************************************************************************************************************************************/
N'
PIVOT
(
  MAX([Answer_value])
  FOR [QA_std]
                   in (
'
/***************************************************************************************************************************************************************/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                /*** start listing of variables                                              ***/
/***************************************************************************************************************************************************************/
-- select                                                                       /*** SELECT statement to TEST stuffing procedure...                          ***/
/*** Begin stuffing function to remove the first comma in the list of fields to be retrieved (parenthesis not needed) ******************************************/
STUFF(                                                                          /*** begining of the "stuff: function                                        ***/
/***************************************************************************************************************************************************************/
(                                                                                /*** parenthesis to include query for the cell to be stuffed                ***/
/***************************************************************************************************************************************************************/
/*** Begin selection (into text, in a cell) of a comma delimited list of fields from a system view *************************************************************/
/***************************************************************************************************************************************************************/
    SELECT                                                                      /*** SELECT statement (notice THERE IS alias for the recoded field           ***/
          DISTINCT                                                              /*** should be distinct to include once each variable name                   ***/
          ', '                                                                  /*** comma delimiter                                                         ***/
        +                                                                       /*** concatenated to...                                                      ***/
          [QA_std]                                                              /*** Fiels including all Q Abb Std (StdVarName)                              ***/
    FROM                                                                        /*** from...                                                                 ***/
          [vr___01_cDB_Long__NoAggregated]                                      /*** name of the table which includes all field (var) names as rows          ***/
                                                                                /*** NO FILTERS needed                                                       ***/
         ORDER BY                                                               /*** sorting order using exact final field, including:                       ***/
          ', '                                                                  /*** comma delimiter                                  -> as part of sorting  ***/
        +                                                                       /*** concatenated to...                               -> as part of sorting  ***/
          [QA_std]                                                              /*** Fiels including all Q Abb Std (StdVarName)       -> as part of sorting  ***/
         for xml path('')                                                       /*** Modifies the selected rowset nesting all cells into an XML string cell  ***/
/***************************************************************************************************************************************************************/
/*** End of the selection (into text, in a cell) of a comma delimited list of fields ***************************************************************************/
/***************************************************************************************************************************************************************/
)                                                                                /*** parenthesis to include query for the cell to be stuffed                ***/
/***************************************************************************************************************************************************************/
, 1, 1, '')                                                                     /*** from STUFF: from position 1, change 1 character into ''                 ***/
/****************************************************************************************************************************** stuffing function ends here! ***/
                                                                                /*** end of listing of variables                                             ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***************************************************************************************************************************************************************/
N'
)
 )                                                                                                                                                     AS   pivt
  )                                                                                                                                                    AS   berc
'
/***************************************************************************************************************************************************************/
/*** This is a way for checking the SQL statement that has been stored as a string variable ********************************************************************/
--  SELECT @ALLCODE
/***************************************************************************************************************************************************************/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***************************************************************************************************************************************************************/
/*** The complete SQL statement stored as a string variable is executed as a character string ******************************************************************/
/***************************************************************************************************************************************************************/
EXEC  (@ALLCODE)
/***************************************************************************************************************************************************************/
GO 
 
 
 
/***                                                                           -o-                                                                           ***/   
 
 
 
 
/***=========================================================================================================================================================***/   
/*** ------------------------------------------------------------------------------------------------------------------------------------------------------- ***/   
 
 
 
  _005_lt__DBWnXt_byCnY___R.sql                                                                                                                                    
 
 
 
/*** ------------------------------------------------------------------------------------------------------------------------------------------------------- ***/   
/***=========================================================================================================================================================***/   
 
 
/***************************************************************************************************************************************************************/
Print 
'--- ' + CONVERT (VARCHAR(19), SYSDATETIME()) + ' ==>  script 005    ------------------------------------------------------------------------------------------ '
/***************************************************************************************************************************************************************/
/***                                                                                                                                                         ***/
/***     >>>>>   This is the script used to create the lookup table [forum_ResAnal].[dbo].[vr_03w_W&Extras_by_Ctry&Year]                           <<<<<     ***/
/***             This table only includes numeric values aggregated by country/religion & year (does not include descriptive wordings).                      ***/
/***             The table adds calculated variables using the basic variables stored in the database.                                                       ***/
/***                                                                                                                                                         ***/
/***                                                      > > >     lookup tables work faster     < < <                                                      ***/
/***                                                                                                                                                         ***/
/***************************************************************************************************************************************************************/
USE [forum_ResAnal]
GO
/***************************************************************************************************************************************************************/
IF OBJECT_ID  (N'[forum_ResAnal].[dbo].[vr___03_cDB_W&Xtra_byCtry&Year]', N'U') IS NOT NULL
DROP TABLE       [forum_ResAnal].[dbo].[vr___03_cDB_W&Xtra_byCtry&Year]
SELECT * INTO    [forum_ResAnal].[dbo].[vr___03_cDB_W&Xtra_byCtry&Year]
FROM
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
(
/***************************************************************************************************************************************************************/
--*** May need to:
--    Clean XSG_25n27  as rowmax(GRX_25_01_2010 SHX_27_01_2010)
/*** main select statement *************************************************************************************************************************************/
/*** table including numeric values + Step-3 calculated variables **********************************************************************************************/
SELECT
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* NOTE: scaled GRI_19_ b to f requested by Peter Henne in 2015 */
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* GRI_19_b, scaled (0 = None, .2 = 1-9 cases, .4 = 10-200 cases, .6 = 201 - 1000 cases, .8 = 1001 - 9999 cases, 1 = 10000+ cases) */
                   GRI_19_b_scaled
       = CAST ((
         CASE 
              WHEN GRI_19_b   >  10000 THEN 1     -- (1   = 10000+      cases)
              WHEN GRI_19_b   >   1000 THEN 0.8   -- ( .8 =  1001 - 9999 cases)
              WHEN GRI_19_b   >    200 THEN 0.6   -- ( .6 =   201 - 1000 cases)
              WHEN GRI_19_b   >     10 THEN 0.4   -- ( .4 =    10 -  200 cases)
              WHEN GRI_19_b   >      0 THEN 0.2   -- ( .2 =     1 -    9 cases)
              WHEN GRI_19_b   =      0 THEN 0.0   -- (0   =  None             )
         END
                                                               ) AS DECIMAL (38,2))
/* GRI_19_c, scaled (0 = None, .2 = 1-9 cases, .4 = 10-200 cases, .6 = 201 - 1000 cases, .8 = 1001 - 9999 cases, 1 = 10000+ cases) */
       ,           GRI_19_c_scaled
       = CAST ((
         CASE 
              WHEN GRI_19_c   >  10000 THEN 1     -- (1   = 10000+      cases)
              WHEN GRI_19_c   >   1000 THEN 0.8   -- ( .8 =  1001 - 9999 cases)
              WHEN GRI_19_c   >    200 THEN 0.6   -- ( .6 =   201 - 1000 cases)
              WHEN GRI_19_c   >     10 THEN 0.4   -- ( .4 =    10 -  200 cases)
              WHEN GRI_19_c   >      0 THEN 0.2   -- ( .2 =     1 -    9 cases)
              WHEN GRI_19_c   =      0 THEN 0.0   -- (0   =  None             )
         END
                                                               ) AS DECIMAL (38,2))
/* GRI_19_d, scaled (0 = None, .2 = 1-9 cases, .4 = 10-200 cases, .6 = 201 - 1000 cases, .8 = 1001 - 9999 cases, 1 = 10000+ cases) */
       ,           GRI_19_d_scaled
       = CAST ((
         CASE 
              WHEN GRI_19_d   >  10000 THEN 1     -- (1   = 10000+      cases)
              WHEN GRI_19_d   >   1000 THEN 0.8   -- ( .8 =  1001 - 9999 cases)
              WHEN GRI_19_d   >    200 THEN 0.6   -- ( .6 =   201 - 1000 cases)
              WHEN GRI_19_d   >     10 THEN 0.4   -- ( .4 =    10 -  200 cases)
              WHEN GRI_19_d   >      0 THEN 0.2   -- ( .2 =     1 -    9 cases)
              WHEN GRI_19_d   =      0 THEN 0.0   -- (0   =  None             )
         END
                                                               ) AS DECIMAL (38,2))
/* GRI_19_e, scaled (0 = None, .2 = 1-9 cases, .4 = 10-200 cases, .6 = 201 - 1000 cases, .8 = 1001 - 9999 cases, 1 = 10000+ cases) */
       ,           GRI_19_e_scaled
       = CAST ((
         CASE 
              WHEN GRI_19_e   >  10000 THEN 1     -- (1   = 10000+      cases)
              WHEN GRI_19_e   >   1000 THEN 0.8   -- ( .8 =  1001 - 9999 cases)
              WHEN GRI_19_e   >    200 THEN 0.6   -- ( .6 =   201 - 1000 cases)
              WHEN GRI_19_e   >     10 THEN 0.4   -- ( .4 =    10 -  200 cases)
              WHEN GRI_19_e   >      0 THEN 0.2   -- ( .2 =     1 -    9 cases)
              WHEN GRI_19_e   =      0 THEN 0.0   -- (0   =  None             )
         END
                                                               ) AS DECIMAL (38,2))
/* GRI_19_f, scaled (0 = None, .2 = 1-9 cases, .4 = 10-200 cases, .6 = 201 - 1000 cases, .8 = 1001 - 9999 cases, 1 = 10000+ cases) */
       ,           GRI_19_f_scaled
       = CAST ((
         CASE 
              WHEN GRI_19_f   >  10000 THEN 1     -- (1   = 10000+      cases)
              WHEN GRI_19_f   >   1000 THEN 0.8   -- ( .8 =  1001 - 9999 cases)
              WHEN GRI_19_f   >    200 THEN 0.6   -- ( .6 =   201 - 1000 cases)
              WHEN GRI_19_f   >     10 THEN 0.4   -- ( .4 =    10 -  200 cases)
              WHEN GRI_19_f   >      0 THEN 0.2   -- ( .2 =     1 -    9 cases)
              WHEN GRI_19_f   =      0 THEN 0.0   -- (0   =  None             )
         END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* NOTE: scaled GRI_19_ b to f requested by Peter Henne in 2015 ends here */
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* NOTE: scaled index values based in year 2007 */
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* GRI_scaled index */
      ,  GRI_scaled 
         =        CAST ((
                  CASE
                  WHEN GRI <= ( SELECT [CutPoint] FROM [forum].[dbo].[Pew_Field]
                                                     , [forum].[dbo].[Pew_Index_Cut_Points]
                                WHERE  [Field_fk]   = [Field_pk]
                                  AND  [Level]      = 'low'
                                  AND  [Point]      = 'highest'
                                  AND  [Field_type] = 'GRI'
                                  AND  [Field_year] = '2007'
                              )
                  THEN 1.00
                  WHEN GRI <= ( SELECT [CutPoint] FROM [forum].[dbo].[Pew_Field]
                                                     , [forum].[dbo].[Pew_Index_Cut_Points]
                                WHERE  [Field_fk]   = [Field_pk]
                                  AND  [Level]      = 'moderate'
                                  AND  [Point]      = 'highest'
                                  AND  [Field_type] = 'GRI'
                                  AND  [Field_year] = '2007'
                              )
                  THEN 2.00
                  WHEN GRI <= ( SELECT [CutPoint] FROM [forum].[dbo].[Pew_Field]
                                                     , [forum].[dbo].[Pew_Index_Cut_Points]
                                WHERE  [Field_fk]   = [Field_pk]
                                  AND  [Level]      = 'high'
                                  AND  [Point]      = 'highest'
                                  AND  [Field_type] = 'GRI'
                                  AND  [Field_year] = '2007'
                              )
                  THEN 3.00
                  WHEN GRI <= ( SELECT [CutPoint] FROM [forum].[dbo].[Pew_Field]
                                                     , [forum].[dbo].[Pew_Index_Cut_Points]
                                WHERE  [Field_fk]   = [Field_pk]
                                  AND  [Level]      = 'very high'
                                  AND  [Point]      = 'highest'
                                  AND  [Field_type] = 'GRI'
                                  AND  [Field_year] = '2007'
                              )
                  THEN 4.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* SHI_scaled index */
      ,  SHI_scaled 
         =        CAST ((
                  CASE
                  WHEN SHI <= ( SELECT [CutPoint] FROM [forum].[dbo].[Pew_Field]
                                                     , [forum].[dbo].[Pew_Index_Cut_Points]
                                WHERE  [Field_fk]   = [Field_pk]
                                  AND  [Level]      = 'low'
                                  AND  [Point]      = 'highest'
                                  AND  [Field_type] = 'SHI'
                                  AND  [Field_year] = '2007'
                              )
                  THEN 1.00
                  WHEN SHI <= ( SELECT [CutPoint] FROM [forum].[dbo].[Pew_Field]
                                                     , [forum].[dbo].[Pew_Index_Cut_Points]
                                WHERE  [Field_fk]   = [Field_pk]
                                  AND  [Level]      = 'moderate'
                                  AND  [Point]      = 'highest'
                                  AND  [Field_type] = 'SHI'
                                  AND  [Field_year] = '2007'
                              )
                  THEN 2.00
                  WHEN SHI <= ( SELECT [CutPoint] FROM [forum].[dbo].[Pew_Field]
                                                     , [forum].[dbo].[Pew_Index_Cut_Points]
                                WHERE  [Field_fk]   = [Field_pk]
                                  AND  [Level]      = 'high'
                                  AND  [Point]      = 'highest'
                                  AND  [Field_type] = 'SHI'
                                  AND  [Field_year] = '2007'
                              )
                  THEN 3.00
                  WHEN SHI <= ( SELECT [CutPoint] FROM [forum].[dbo].[Pew_Field]
                                                     , [forum].[dbo].[Pew_Index_Cut_Points]
                                WHERE  [Field_fk]   = [Field_pk]
                                  AND  [Level]      = 'very high'
                                  AND  [Point]      = 'highest'
                                  AND  [Field_type] = 'SHI'
                                  AND  [Field_year] = '2007'
                              )
                  THEN 4.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* GFI_scaled index */
      ,  GFI_scaled 
         =        CAST ((
                  CASE
                  WHEN GFI <= ( SELECT [CutPoint] FROM [forum].[dbo].[Pew_Field]
                                                     , [forum].[dbo].[Pew_Index_Cut_Points]
                                WHERE  [Field_fk]   = [Field_pk]
                                  AND  [Level]      = 'low'
                                  AND  [Point]      = 'highest'
                                  AND  [Field_type] = 'GFI'
                                  AND  [Field_year] = '2007'
                              )
                  THEN 1.00
                  WHEN GFI <= ( SELECT [CutPoint] FROM [forum].[dbo].[Pew_Field]
                                                     , [forum].[dbo].[Pew_Index_Cut_Points]
                                WHERE  [Field_fk]   = [Field_pk]
                                  AND  [Level]      = 'moderate'
                                  AND  [Point]      = 'highest'
                                  AND  [Field_type] = 'GFI'
                                  AND  [Field_year] = '2007'
                              )
                  THEN 2.00
                  WHEN GFI <= ( SELECT [CutPoint] FROM [forum].[dbo].[Pew_Field]
                                                     , [forum].[dbo].[Pew_Index_Cut_Points]
                                WHERE  [Field_fk]   = [Field_pk]
                                  AND  [Level]      = 'high'
                                  AND  [Point]      = 'highest'
                                  AND  [Field_type] = 'GFI'
                                  AND  [Field_year] = '2007'
                              )
                  THEN 3.00
                  WHEN GFI <= ( SELECT [CutPoint] FROM [forum].[dbo].[Pew_Field]
                                                     , [forum].[dbo].[Pew_Index_Cut_Points]
                                WHERE  [Field_fk]   = [Field_pk]
                                  AND  [Level]      = 'very high'
                                  AND  [Point]      = 'highest'
                                  AND  [Field_type] = 'GFI'
                                  AND  [Field_year] = '2007'
                              )
                  THEN 4.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* GRI_rounded index */
      ,  GRI_rd_1d 
         =        CAST ((
                                  GRI 
                                                               ) AS DECIMAL (38,1))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* SHI_rounded index */
      ,  SHI_rd_1d 
         =        CAST ((
                                  SHI 
                                                               ) AS DECIMAL (38,1))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* GFI_rounded index */
      ,  GFI_rd_1d 
         =        CAST ((
                                  GFI
                                                               ) AS DECIMAL (38,1))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
       , *

FROM
/***************************************************************************************************************************************************************/
(
/*** table including numeric values + Step-2 calculated variables **********************************************************************************************/
SELECT
/* Indexes wiolll NOT fit previously published data  ----------------------------------------------------------------------------------------------------------*/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* GRI index */
         GRI 
         =
                  CAST ((((
                                [GRI_01]
                         +      [GRI_02]
                         +      [GRI_03]
                         +      [GRI_04]
                         +      [GRI_05]
                         +      [GRI_06]
                         +      [GRI_07]
                         +      [GRI_08_for_index]
                         +      [GRI_09]
                         +      [GRI_10]
                         +      [GRI_11]
                         +      [GRI_12]
                         +      [GRI_13]
                         +      [GRI_14]
                         +      [GRI_15]
                         +      [GRI_16]
                         +      [GRI_17]
                         +      [GRI_18]
                         +      [GRI_19]
                         +      [GRI_20]
                                                       ) / 2    )
                                                                  ) AS DECIMAL (38,32))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* SHI index */
       , SHI 
         =        CAST ((((
                                [SHI_01]
                         +      [SHI_02]
                         +      [SHI_03]
                         +      [SHI_04]
                         +      [SHI_05]
                         +      [SHI_06]
                         +      [SHI_07]
                         +      [SHI_08]
                         +      [SHI_09]
                         +      [SHI_10]
                         +      [SHI_11_for_index]
                         +      [SHI_12]
                         +      [SHI_13]
                                                       ) / 1.3  )
                                                                  ) AS DECIMAL (38,32))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* GFI index */
       , GFI 
         =        CAST ((((
                                [GRI_20_01]
                         +      [GRI_20_02]
                         + ( (  [GRI_20_03_a]
                              + [GRI_20_03_b]
                              + [GRI_20_03_c]
                                               ) / 3 )
                         +      [GRI_20_04]
                         +      [GRI_20_05]
                                                       ) / 5 ) 
                                                              * 10
                                                                  ) AS DECIMAL (38,32))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Government & Social harassment of Christianity */
       , XSG_01_xG1 
         =        CAST ((
                  CASE
                  WHEN GRI_11_xG1 + SHI_01_xG1 > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Government & Social harassment of Islam */
       , XSG_01_xG2 
         =        CAST ((
                  CASE
                  WHEN GRI_11_xG2 + SHI_01_xG2 > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Government & Social harassment of Buddhism */
       , XSG_01_xG3 
         =        CAST ((
                  CASE
                  WHEN GRI_11_xG3 + SHI_01_xG3 > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Government & Social harassment of Hinduism */
       , XSG_01_xG4 
         =        CAST ((
                  CASE
                  WHEN GRI_11_xG4 + SHI_01_xG4 > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Government & Social harassment of Judaism */
       , XSG_01_xG5 
         =        CAST ((
                  CASE
                  WHEN GRI_11_xG5 + SHI_01_xG5 > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Government & Social harassment of Other ('New' Religions, Ancient Religions, Sikhs, Zoroastrianism) */
       , XSG_01_xG6 
         =        CAST ((
                  CASE
                  WHEN GRI_11_xG6 + SHI_01_xG6 > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Government & Social harassment of Ethnic or Tribal Religions */
       , XSG_01_xG7 
         =        CAST ((
                  CASE
                  WHEN GRI_11_xG7 + SHI_01_xG7 > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 SHI_01_summary_a_ny           for toplines */
       ,           SHI_01_summary_a_ny
       = CAST ((
         CASE 
              WHEN SHI_01     =  0.00
              THEN               0.00
              WHEN SHI_01     >  0.00
              THEN               0.01
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHI_01_summary_a_nya
       = CAST ((
         CASE 
              WHEN SHI_01_a   >  0.00
              THEN               1.01
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHI_01_summary_a_nyb
       = CAST ((
         CASE 
              WHEN SHI_01_b   >  0.00
              THEN               1.02
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHI_01_summary_a_nyc
       = CAST ((
         CASE 
              WHEN SHI_01_c   >  0.00
              THEN               1.03
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHI_01_summary_a_nyd
       = CAST ((
         CASE 
              WHEN SHI_01_d   >  0.00
              THEN               1.04
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHI_01_summary_a_nye
       = CAST ((
         CASE 
              WHEN SHI_01_e   >  0.00
              THEN               1.05
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHI_01_summary_a_nyf
       = CAST ((
         CASE 
              WHEN SHI_01_f   >  0.00
              THEN               1.06
         END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 XSG_242526_ny           for toplines */
       ,           XSG_242526_ny
       = CAST ((
         CASE WHEN GRX_24     = 0.00
               AND SHX_25     = 0.00
               AND SHX_26     = 0.00
              THEN              0.00
              WHEN GRX_24     > 0.00
                OR SHX_25     > 0.00
                OR SHX_26     > 0.00
              THEN              0.01
              END
                                                               ) AS DECIMAL (38,2))
       ,           XSG_242526_ny1
       = CAST ((
         CASE WHEN GRX_24     = 0.00
               AND SHX_25     = 0.00
               AND SHX_26     = 0.00
              THEN              NULL
              WHEN GRX_24     = 1.00
                OR SHX_25     = 1.00
                OR SHX_26     = 1.00
              THEN              1.00
              WHEN GRX_24     = 0.67
                OR SHX_25     = 0.67
                OR SHX_26     = 0.67
              THEN              0.67
              WHEN GRX_24     = 0.33
                OR SHX_25     = 0.33
                OR SHX_26     = 0.33
              THEN              0.33
              END
                                                               ) AS DECIMAL (38,2))
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 XSG_25n27_ny           for toplines */
       ,           XSG_25n27_ny
       = CAST ((
         CASE WHEN GRX_25_ny  = 0.00
               AND SHX_27_ny  = 0.00
              THEN              0.00
              WHEN GRX_25_ny  = 0.01
                OR SHX_27_ny  = 0.01
              THEN              0.01
              END
                                                               ) AS DECIMAL (38,2))
       ,           XSG_25n27_ny2
       = CAST ((
         CASE WHEN GRX_25_ny2 = 0.02
                OR SHX_27_ny2 = 0.02
              THEN              0.02
              END
                                                               ) AS DECIMAL (38,2))
       ,           XSG_25n27_ny3
       = CAST ((
         CASE WHEN GRX_25_ny3 = 0.03
                OR SHX_27_ny3 = 0.03
              THEN              0.03
              END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

       , *
FROM
/***************************************************************************************************************************************************************/
(
/*** table including numeric values + Step-1 calculated variables **********************************************************************************************/
SELECT
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
         GRI_20
         =        ROUND(
                  CAST ((((
                                [GRI_20_01]
                         +      [GRI_20_02]
                         + ( (  [GRI_20_03_a]
                              + [GRI_20_03_b]
                              + [GRI_20_03_c]
                                               ) / 3 )
                         +      [GRI_20_04]
                         +      [GRI_20_05]
                                                       ) / 5  )
                                                               ) AS DECIMAL (38,2)) ,2)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
       , GRI_20_top
         =        CAST ((
                  CASE
                  WHEN GRI_20_03_a = 1
                    OR GRI_20_03_b = 1
                    OR GRI_20_03_c = 1
                    OR GRI_20_02   > 0.5
                  THEN               1.00
                  WHEN GRI_20_01   > 0
                    OR GRI_20_02   > 0
                    OR GRI_20_03_a > 0
                    OR GRI_20_03_b > 0
                    OR GRI_20_03_c > 0
                    OR GRI_20_04   > 0
                    OR GRI_20_05   > 0
                  THEN               0.50
                  ELSE               0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
       , GRI_20_03_top
         =        CAST ((
                  CASE
                  WHEN GRI_20_03_a >= GRI_20_03_b
                   AND GRI_20_03_a >= GRI_20_03_c
                  THEN GRI_20_03_a
                  WHEN GRI_20_03_b >= GRI_20_03_a
                   AND GRI_20_03_b >= GRI_20_03_c
                  THEN GRI_20_03_b
                  WHEN GRI_20_03_c >= GRI_20_03_b
                   AND GRI_20_03_c >= GRI_20_03_c
                  THEN GRI_20_03_c
                  ELSE NULL
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
       , 
--       select
       SHI_01
         =        CAST ((
                  (
                  CAST ((
                    ( CASE
                      WHEN SHI_01_a > 0 THEN 1
                      ELSE                   0
                       END                     )
                  + ( CASE
                      WHEN SHI_01_b > 0 THEN 1
                      ELSE                   0
                       END                     )
                  + ( CASE
                      WHEN SHI_01_c > 0 THEN 1
                      ELSE                   0
                       END                     )
                  + ( CASE
                      WHEN SHI_01_d > 0 THEN 1
                      ELSE                   0
                       END                     )
                  + ( CASE
                      WHEN SHI_01_e > 0 THEN 1
                      ELSE                   0
                       END                     )
                  + ( CASE
                      WHEN SHI_01_f > 0 THEN 1
                      ELSE                   0
                       END                     )
                                                       
                                                               ) AS DECIMAL (38,2))
                                                                                    / 6 )
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
       , SHI_01_summary_b
         =        CAST ((
                  (
                  CAST ((
                    ( CASE
                      WHEN SHI_01_a > 0 THEN 1
                      ELSE                   0
                       END                     )
                  + ( CASE
                      WHEN SHI_01_b > 0 THEN 1
                      ELSE                   0
                       END                     )
                  + ( CASE
                      WHEN SHI_01_c > 0 THEN 1
                      ELSE                   0
                       END                     )
                  + ( CASE
                      WHEN SHI_01_d > 0 THEN 1
                      ELSE                   0
                       END                     )
                  + ( CASE
                      WHEN SHI_01_e > 0 THEN 1
                      ELSE                   0
                       END                     )
                  + ( CASE
                      WHEN SHI_01_f > 0 THEN 1
                      ELSE                   0
                       END                     )
                                                       
                                                               ) AS DECIMAL (38,2))
                                                                                    / 6 )
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 SHI_01_[a,b,c,d,e,f]_dummy for tables of question answers by country */
       ,           SHI_01_a_dummy
       = CAST ((
         CASE 
              WHEN SHI_01_a   >  0.00
              THEN               1
              ELSE               0
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHI_01_b_dummy
       = CAST ((
         CASE 
              WHEN SHI_01_b   >  0.00
              THEN               1
              ELSE               0
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHI_01_c_dummy
       = CAST ((
         CASE 
              WHEN SHI_01_c   >  0.00
              THEN               1
              ELSE               0
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHI_01_d_dummy
       = CAST ((
         CASE 
              WHEN SHI_01_d   >  0.00
              THEN               1
              ELSE               0
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHI_01_e_dummy
       = CAST ((
         CASE 
              WHEN SHI_01_e   >  0.00
              THEN               1
              ELSE               0
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHI_01_f_dummy
       = CAST ((
         CASE 
              WHEN SHI_01_f   >  0.00
              THEN               1
              ELSE               0
         END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Gov harassment of Christianity */
       , GRI_11_xG1
         =        CAST ((
                  CASE
                  WHEN   GRI_11_01a
                       + GRI_11_01b
                       + GRI_11_02
                       + GRI_11_03
                       + GRI_11_11
                  > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Gov harassment of Islam */
       , GRI_11_xG2 
         =        CAST ((
                  CASE
                  WHEN   GRI_11_04
                       + GRI_11_05
                       + GRI_11_06
                       + GRI_11_12
                  > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Gov harassment of Buddhism */
       , GRI_11_xG3 
         =        CAST ((
                  CASE
                  WHEN   GRI_11_07
                  > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Gov harassment of Hinduism */
       , GRI_11_xG4 
         =        CAST ((
                  CASE
                  WHEN   GRI_11_08
                  > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Gov harassment of Judaism */
       , GRI_11_xG5 
         =        CAST ((
                  CASE
                  WHEN   GRI_11_09
                  > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Gov harassment of Other ('New' Religions, Ancient Religions, Sikhs, Zoroastrianism) */
       , GRI_11_xG6 
         =        CAST ((
                  CASE
                  WHEN   isnull(GRI_11_10, 0)
                       + isnull(GRI_11_14, 0)
                       + isnull(GRI_11_15, 0)
                       + isnull(GRI_11_16, 0)
                  > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Gov harassment of Ethnic or Tribal Religions */
       , GRI_11_xG7
         =        CAST ((
                  CASE
                  WHEN   GRI_11_13
                  > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Social harassment of Christianity */
       , SHI_01_xG1
         =        CAST ((
                  CASE
                  WHEN   SHI_01_x_01a
                       + SHI_01_x_01b
                       + SHI_01_x_02
                       + SHI_01_x_03
                       + SHI_01_x_11
                  > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Social harassment of Islam */
       , SHI_01_xG2 
         =        CAST ((
                  CASE
                  WHEN   SHI_01_x_04
                       + SHI_01_x_05
                       + SHI_01_x_06
                       + SHI_01_x_12
                  > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Social harassment of Buddhism */
       , SHI_01_xG3 
         =        CAST ((
                  CASE
                  WHEN   SHI_01_x_07
                  > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Social harassment of Hinduism */
       , SHI_01_xG4 
         =        CAST ((
                  CASE
                  WHEN   SHI_01_x_08
                  > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Social harassment of Judaism */
       , SHI_01_xG5 
         =        CAST ((
                  CASE
                  WHEN   SHI_01_x_09
                  > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Social harassment of Other ('New' Religions, Ancient Religions, Sikhs, Zoroastrianism) */
       , SHI_01_xG6 
         =        CAST ((
                  CASE
                  WHEN   isnull(SHI_01_x_10, 0)
                       + isnull(SHI_01_x_14, 0)
                       + isnull(SHI_01_x_15, 0)
                       + isnull(SHI_01_x_16, 0)
                  > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Social harassment of Ethnic or Tribal Religions */
       , SHI_01_xG7
         =        CAST ((
                  CASE
                  WHEN   SHI_01_x_13
                  > 0
                  THEN 1.00
                  ELSE 0.00
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* recode GRI_08 to be used as index-factor */
       , GRI_08_for_index
         =        CAST ((
                  CASE
                  WHEN GRI_08  = 0.5
                  THEN           1
                  ELSE GRI_08
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/* recode SHI_Q_11 to be used as index-factor */
       , SHI_11_for_index
         =        CAST ((
                  CASE
                  WHEN SHI_11  = 0.5
                  THEN           1
                  ELSE SHI_11
                  END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 GRI_16               for toplines */
       ,           GRI_16_ny
       = CAST ((
         CASE 
              WHEN GRI_16     =  0.00
              THEN               0.00
              WHEN GRI_16     >  0.00
              THEN               0.01
         END
                                                               ) AS DECIMAL (38,2))
       ,           GRI_16_ny1
       = CAST ((
         CASE 
              WHEN GRI_16     =  0.00
              THEN               NULL
              WHEN GRI_16     >  0.00
              THEN               GRI_16
         END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 GRI_19               for toplines */
       ,           GRI_19_ny
       = CAST ((
         CASE 
              WHEN GRI_19     =  0.00
              THEN               0.00
              WHEN GRI_19     >  0.00
              THEN               0.01
         END
                                                               ) AS DECIMAL (38,2))
       ,           GRI_19_ny1
       = CAST ((
         CASE 
              WHEN GRI_19     =  0.00
              THEN               NULL
              WHEN GRI_19     >  0.00
              THEN               GRI_19
         END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 GRI_19_summ_ny          for toplines */
       ,           GRI_19_summ_ny
       = CAST ((
         CASE 
              WHEN GRI_19     =  0.00
              THEN               0.00
              WHEN GRI_19     >  0.00
              THEN               0.01
         END
                                                               ) AS DECIMAL (38,2))
       ,           GRI_19_summ_nyb
       = CAST ((
         CASE 
              WHEN GRI_19_b   >  0.00
              THEN               1.02
         END
                                                               ) AS DECIMAL (38,2))
       ,           GRI_19_summ_nyc
       = CAST ((
         CASE 
              WHEN GRI_19_c   >  0.00
              THEN               1.03
         END
                                                               ) AS DECIMAL (38,2))
       ,           GRI_19_summ_nyd
       = CAST ((
         CASE 
              WHEN GRI_19_d   >  0.00
              THEN               1.04
         END
                                                               ) AS DECIMAL (38,2))
       ,           GRI_19_summ_nye
       = CAST ((
         CASE 
              WHEN GRI_19_e   >  0.00
              THEN               1.05
         END
                                                               ) AS DECIMAL (38,2))
       ,           GRI_19_summ_nyf
       = CAST ((
         CASE 
              WHEN GRI_19_f   >  0.00
              THEN               1.06
         END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 GRI_19_x              for toplines */
       ,           GRI_19_x
       =           ISNULL(GRI_19_b, 0)
                 + ISNULL(GRI_19_c, 0)
                 + ISNULL(GRI_19_d, 0)
                 + ISNULL(GRI_19_e, 0)
                 + ISNULL(GRI_19_f, 0)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 SHI_04_ny          for toplines */
       ,           SHI_04_ny
       = CAST ((
         CASE 
              WHEN SHI_04     =  0.00
              THEN               0.00
              WHEN SHI_04     >  0.00
              THEN               0.01
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHI_04_ny1
       = CAST ((
         CASE 
              WHEN SHI_04     =  0.00
              THEN               NULL
              WHEN SHI_04     >  0.00
              THEN               SHI_04
         END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 SHI_05_ny          for toplines */
       ,           SHI_05_ny
       = CAST ((
         CASE 
              WHEN SHI_05     =  0.00
              THEN               0.00
              WHEN SHI_05     >  0.00
              THEN               0.01
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHI_05_ny1
       = CAST ((
         CASE 
              WHEN SHI_05     =  0.00
              THEN               NULL
              WHEN SHI_05     >  0.00
              THEN               SHI_05
         END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 SHI_07_ny          for toplines */
       ,           SHI_07_ny
       = CAST ((
         CASE 
              WHEN SHI_07     =  0.00
              THEN               0.00
              WHEN SHI_07     >  0.00
              THEN               0.01
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHI_07_ny1
       = CAST ((
         CASE 
              WHEN SHI_07     =  0.00
              THEN               NULL
              WHEN SHI_07     >  0.00
              THEN               SHI_07
         END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 SHI_01_x              for toplines??? - added on Dec2015  */
       ,           SHI_01_x
       =           ISNULL(SHI_01_b, 0)
                 + ISNULL(SHI_01_c, 0)
                 + ISNULL(SHI_01_d, 0)
                 + ISNULL(SHI_01_e, 0)
                 + ISNULL(SHI_01_f, 0)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 GRX_22               for toplines */
--     ,           GRX_22_ny1    => this was the former name
       ,           GRX_22_aggreg
       = CAST ((
         CASE WHEN ISNULL(GRX_22   , 9)  = 9
               AND ISNULL(GRX_22_01, 9)  = 9
               AND ISNULL(GRX_22_02, 9)  = 9
               AND ISNULL(GRX_22_04, 9)  = 9
              THEN               NULL
              WHEN ISNULL(GRX_22   , 0)  < 0.66
               AND ISNULL(GRX_22_01, 0)  < 0.66
               AND ISNULL(GRX_22_02, 0)  < 0.66
               AND ISNULL(GRX_22_04, 0)  < 0.66
              THEN              0
              WHEN ISNULL(GRX_22   , 0)  < 1.00
               AND ISNULL(GRX_22_01, 0)  < 1.00
               AND ISNULL(GRX_22_02, 0)  < 1.00
               AND ISNULL(GRX_22_04, 0)  < 1.00
              THEN              0.67
              WHEN GRX_22     = 1.00
                OR GRX_22_01  = 1.00
                OR GRX_22_02  = 1.00
                OR GRX_22_04  = 1.00
              THEN              1.00
--              ELSE 1000                       /*this for checking any value non-recoded*/
              END
                                                               ) AS DECIMAL (38,2))
/* current does not display "NO" -- this would be just a dummy but it has NOT BEEN TESTED: */
---------------------------------------------------------------------------------------------
--       ,           GRX_22_ny
--       = CAST ((
--         CASE WHEN ISNULL(GRX_22   , 9)   = 9
--               AND ISNULL(GRX_22_01, 9)   = 9
--               AND ISNULL(GRX_22_02, 9)   = 9
--               AND ISNULL(GRX_22_04, 9)   = 9
--              THEN               NULL
--              WHEN ISNULL(GRX_22   , 0)   < 0.66
--               AND ISNULL(GRX_22_01, 0)   < 0.66
--               AND ISNULL(GRX_22_02, 0)   < 0.66
--               AND ISNULL(GRX_22_04, 0)   < 0.66
--              THEN              0
--              WHEN ISNULL(GRX_22   , 0)  >= 0.66
--               AND ISNULL(GRX_22_01, 0)  >= 0.66
--               AND ISNULL(GRX_22_02, 0)  >= 0.66
--               AND ISNULL(GRX_22_04, 0)  >= 0.66
--              THEN              0.01
--              END
--                                                               ) AS DECIMAL (38,2))
---------------------------------------------------------------------------------------------
/*                                                         END of CODE -> NOT BEEN TESTED: */
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 GRX_22_01               for toplines */
       ,           GRX_22_01_ny
       = CAST ((
         CASE WHEN GRX_22_01  < 0.66
              THEN              0
              WHEN GRX_22_01 >= 0.66
              THEN              0.01
         END
                                                               ) AS DECIMAL (38,2))
       ,           GRX_22_01_ny1
       = CAST ((
         CASE WHEN GRX_22_01  < 0.66
              THEN              NULL
              WHEN GRX_22_01 >= 0.66
              THEN              GRX_22_01
         END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 GRX_22_02               for toplines */
       ,           GRX_22_02_ny
       = CAST ((
         CASE WHEN GRX_22_02  < 0.66
              THEN              0
              WHEN GRX_22_02 >= 0.66
              THEN              0.01
         END
                                                               ) AS DECIMAL (38,2))
       ,           GRX_22_02_ny1
       = CAST ((
         CASE WHEN GRX_22_02  < 0.66
              THEN              NULL
              WHEN GRX_22_02 >= 0.66
              THEN              GRX_22_02
         END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 GRX_22_03               for toplines */
       ,           GRX_22_03_ny
       = CAST ((
         CASE WHEN GRX_22_03  <  0.66
              THEN               0
              WHEN GRX_22_03 >=  0.66
              THEN               0.01
         END
                                                               ) AS DECIMAL (38,2))
       ,           GRX_22_03_ny1
       = CAST ((
         CASE WHEN GRX_22_03  <  0.66
              THEN               NULL
              WHEN GRX_22_03 >=  0.66
              THEN               GRX_22_03
        END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 GRX_22_04               for toplines */
       ,           GRX_22_04_ny
       = CAST ((
         CASE WHEN GRX_22_04  <  0.66
              THEN               0
              WHEN GRX_22_04 >=  0.66
              THEN               0.01
         END
                                                               ) AS DECIMAL (38,2))
       ,           GRX_22_04_ny1
       = CAST ((
         CASE WHEN GRX_22_04  <  0.66
              THEN               NULL
              WHEN GRX_22_04 >=  0.66
              THEN               GRX_22_04
         END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 GRX_24               for toplines */
       ,           GRX_24_ny
       = CAST ((
         CASE WHEN GRX_24     =  0
              THEN               0
              WHEN GRX_24     >  0
              THEN               0.01
         END
                                                               ) AS DECIMAL (38,2))
       ,           GRX_24_ny1
       = CAST ((
         CASE WHEN GRX_24     =  0
              THEN               NULL
              WHEN GRX_24     >  0
              THEN               GRX_24
         END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 GRX_25               for toplines */
       ,           GRX_25_ny
       = CAST ((
         CASE 
              WHEN GRX_25_01  =  0.00
              THEN               0.00
              WHEN GRX_25_01  =  1.00
              THEN               0.01
         END
                                                               ) AS DECIMAL (38,2))
       ,           GRX_25_ny2
       = CAST ((
         CASE 
              WHEN GRX_25_02  =  1.00
              THEN               0.02
         END
                                                               ) AS DECIMAL (38,2))
       ,           GRX_25_ny3
       = CAST ((
         CASE 
              WHEN GRX_25_03  =  1.00
              THEN               0.03
         END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 SHX_25               for toplines */
       ,           SHX_25_ny
       = CAST ((
         CASE WHEN SHX_25     =  0
              THEN               0
              WHEN SHX_25     >  0
              THEN               0.01
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHX_25_ny1
       = CAST ((
         CASE WHEN SHX_25     =  0
              THEN               NULL
              WHEN SHX_25     >  0
              THEN               SHX_25
         END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 SHX_26               for toplines */
       ,           SHX_26_ny
       = CAST ((
         CASE WHEN SHX_26     =  0
              THEN               0
              WHEN SHX_26     >  0
              THEN               0.01
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHX_26_ny1
       = CAST ((
         CASE WHEN SHX_26     =  0
              THEN               NULL
              WHEN SHX_26     >  0
              THEN               SHX_26
         END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*                 SHX_27               for toplines */
       ,           SHX_27_ny
       = CAST ((
         CASE 
              WHEN SHX_27_01  =  0.00
              THEN               0.00
              WHEN SHX_27_01  =  1.00
              THEN               0.01
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHX_27_ny2
       = CAST ((
         CASE 
              WHEN SHX_27_02  =  1.00
              THEN               0.02
         END
                                                               ) AS DECIMAL (38,2))
       ,           SHX_27_ny3
       = CAST ((
         CASE 
              WHEN SHX_27_03  =  1.00
              THEN               0.03
         END
                                                               ) AS DECIMAL (38,2))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
       , *
FROM
/*** View including numeric values aggregated by country/religion & year ***************************************************************************************/
               [dbo].[vr___02_cDB_Wide__by_Ctry&Year]
/*************************************************************************************** View including numeric values aggregated by country/religion & year ***/
/********************************************************************************************** table including numeric values + Step-1 calculated variables ***/
)                                                                                                                                                       AS NV_S1
/***************************************************************************************************************************************************************/
)                                                                                                                                                       AS NV_S2
/********************************************************************************************** table including numeric values + Step-2 calculated variables ***/
/********************************************************************************************** table including numeric values + Step-3 calculated variables ***/
/************************************************************************************************************************************* main select statement ***/
/***************************************************************************************************************************************************************/
) formerview
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
 
 
/***                                                                           -o-                                                                           ***/   
 
 
 
 
/***=========================================================================================================================================================***/   
/*** ------------------------------------------------------------------------------------------------------------------------------------------------------- ***/   
 
 
 
  _006_lt__LongData_ALL___R.sql                                                                                                                                    
 
 
 
/*** ------------------------------------------------------------------------------------------------------------------------------------------------------- ***/   
/***=========================================================================================================================================================***/   
 
 
/********************************************************************************************************************************************************/
/********************************************************************************************************************************************************/
/***                                                                                                                                                  ***/
/***     >>>>>   This is the script used to create the view [forum_ResAnal].[dbo].[vr_LongCodedData_in_DB]                                  <<<<<     ***/
/***             This view includes numeric values and wordings, as stored & aggregated by country/religion & year & variable (long format)           ***/
/***                                                                                                                                                  ***/
/********************************************************************************************************************************************************/
/*  complete (unfiltered) view could be stored in   *****************************************************************************************************/
USE [forum_ResAnal]
GO
/***************************************************************************************************************************************************************/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/***************************************************************************************************************************************************************/
declare @ALLCODE varchar(max)
declare @CODEBEG varchar(max)
declare @MYCODE1 varchar(max)
declare @MYCODE2 varchar(max)
declare @MYCODE3 varchar(max)
declare @MYCODE4 varchar(max)
declare @MYCODE5 varchar(max)
declare @ENDCODE varchar(max)
/***************************************************************************************************************************************************************/


/***************************************************************************************************************************************************************/
set     @CODEBEG = 
/***     >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>     ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*** > S01 *****************************************************************************************************************************************************/
N'
/***************************************************************************************************************************************************************/
IF OBJECT_ID (N''[forum_ResAnal].[dbo].[vr_06w_LongData_ALL]'', N''U'') IS NOT NULL
DROP TABLE       [forum_ResAnal].[dbo].[vr_06w_LongData_ALL]
SELECT * INTO    [forum_ResAnal].[dbo].[vr_06w_LongData_ALL]
FROM
(
/***************************************************************************************************************************************************************/
'
/*** < S01 *****************************************************************************************************************************************************/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*** > S02 *****************************************************************************************************************************************************/
N'
SELECT
       [v_Basic_row] = ROW_NUMBER()OVER(ORDER BY
                                                  [Nation_fk]
                                                 ,[Question_Year]
                                                 ,[QA_std]
                                                 ,[Locality_fk]
                                                 ,[Answer_fk]     )
      ,[ValSource]
      ,[entity]
      ,[note]
      ,[link_fk]
      ,[Nation_fk]
      ,[Locality_fk]
      ,[Religion_fk]
      ,[Region5]
      ,[Region6]
      ,[Ctry_EditorialName]
      ,[Locality]
      ,[Religion]
      ,[Question_Year]
      ,[QA_std]
      ,[QW_std]
      ,[Answer_value]
      ,[answer_wording]
      ,[answer_wording_std]
      ,[Question_fk]
      ,[Answer_fk]
      ,[Notes]
      ,[editable]               = CASE
                                       WHEN [note] LIKE ''%this field can be edited'' THEN 1
                                       WHEN [note] LIKE ''%eld should NOT be edited'' THEN 0
                                  END
      ,[CntWg]
'
/*** < S02 *****************************************************************************************************************************************************/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*** > (begin seleccion from) ALL SETS OF DATA  ****************************************************************************************************************/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
N'
FROM
(
'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*** < (begin seleccion from) ALL SETS OF DATA  ****************************************************************************************************************/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***     <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<     ***/
/***************************************************************************************************************************************************************/


/***************************************************************************************************************************************************************/
set     @MYCODE1 = 
/***     >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>     ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***************************************************************************************************************************************************************/
/*** > Basic Data: NPR  ****************************************************************************************************************************************/
---   Long set of data including numeric values and descriptive wordings.
---   At levels: country, country/religious group, & country/province
---   Notes
---        - In order to keep consistent to previuos years, data by Province currently belonging to South Sudan
---          should considered data for Sudan before 2010
---        - In order to avoid changing the final set,data previously used for Northern Cyprus
---          should be excluded (current decision)
---        - Although we have REAL data by province for North Korea, we do not use them
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
N'
SELECT
        [ValSource] =   ''vr01LNA''
      , [entity]             = CASE
                                    WHEN [entity]         = ''CR&P'' THEN ''Not Yet Stored in DB''
                                    WHEN [entity]         = ''Ctry'' THEN ''Stored by Country''
                                    WHEN [entity]         = ''RGrp'' THEN ''Stordred by Religion Group (& Ctry)''
                                    WHEN [Question_Year]  < 2012
                                     AND [entity]         = ''Prov'' THEN ''Stored by Locality (should be aggregated)''
                                    WHEN [Question_Year] >= 2012
                                     AND [entity]         = ''Prov'' THEN ''Stored by Country (using Locality code)''
                               END
      , [note]               = ''updated on '' + CONVERT(VARCHAR(11),GETDATE(),9) + '' --  this field can be edited''
      , [link_fk]
      , [Nation_fk]
      , [Locality_fk]
      , [Religion_fk]
      , [Region5]
      , [Region6]
      , [Ctry_EditorialName]
      , [Locality]           = CASE
                                    WHEN [Locality]       = '''' THEN ''not detailed''
                                    WHEN [Locality]      != '''' THEN [Locality]
                               END
      , [Religion]           = CASE
                                    WHEN [Religion]       = '''' THEN ''not detailed''
                                    WHEN [Religion]      != '''' THEN [Religion]
                               END
      , [Question_Year]
      , [QA_std]             = CASE
                                    WHEN [Question_Year]  < 2012
                                     AND [entity]         = ''Prov'' THEN [QA_std] + ''__p''
                                    ELSE                                  [QA_std]
                               END
      , [QW_std]
 --   , [Answer_value]
      , [Answer_value]       =      CAST([Answer_value] AS nvarchar)
      , [answer_wording]
      , [answer_wording_std]
      , [Question_fk]
      , [Answer_fk]
      , [Notes]
      , [CntWg]              = 1
FROM
        [vr___01_cDB_Long__NoAggregated]


'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*****************************************************************************************************************************************  Basic Data: NPR  ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***     <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<     ***/
/***************************************************************************************************************************************************************/


/***************************************************************************************************************************************************************/
set     @MYCODE2 = 
/***     >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>     ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***************************************************************************************************************************************************************/
/*** > PDAbC province data (before 2012) aggregated at country level  ******************************************************************************************/
---   Long set of data aggregating both numeric values and descriptive wordings.
---   (Notes same as above)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
N'
SELECT
        [ValSource]          = ''vr05WCY''
      , [entity]             = ''Province, aggregated by Country''
      , [note]               = ''updated on '' + CONVERT(VARCHAR(11),GETDATE(),9) + '' --  this field should NOT be edited''
      , [link_fk]            = NULL
      , [Nation_fk]          =       D1.[Nation_fk]
      , [Locality_fk]        = NULL
      , [Religion_fk]        = NULL
      , [Region5]            =       D1.[Region5]
      , [Region6]            =       D1.[Region6]
      , [Ctry_EditorialName] =       D1.[Ctry_EditorialName]
      , [Locality]           = ''aggregated by country''
      , [Religion]           = ''not detailed''
      , [Question_Year]      =       D2.[Question_Year]
      , [QA_std]             =       D2.[QA_std]
      , [QW_std]             =       D2.[QW_std]
      , [Answer_value]       = CASE
                               WHEN  D3.[Answer_value] IS NULL
                               THEN  ''0''
                               ELSE
                                CAST(D3.[Answer_value] AS nvarchar)
                               END
      , [Answer_wording]     = CASE
                               WHEN  D3.[Answer_wording] IS NULL
                               THEN  ''not detailed''
                               ELSE  D3.[Answer_wording]
                               END
      , [Answer_wording_std] = CASE
                               WHEN  D3.[Answer_wording_std] IS NULL
                               THEN  ''No cases were found''
                               ELSE  D3.[Answer_wording_std]
                               END
      , [Question_fk]        =  NULL
      , [Answer_fk]          =  NULL
      , [Notes]              = ''not detailed''
      , [CntWg]              = 1
  FROM 
       ( SELECT 
                DISTINCT
                [Nation_fk]
               ,[Region5]
               ,[Region6]
               ,[Ctry_EditorialName]
               ,[Question_Year]      AS [QY]
           FROM    [forum_ResAnal].[dbo].[vr___01_cDB_Long__NoAggregated]
          WHERE    [Question_Year]  < 2012                             )  D1
INNER JOIN
       ( SELECT 
                DISTINCT
                [Question_Year]
               ,[QA_std]         /* SHI_04_b not coded for 2008 */
               ,[QW_std]
               ,[Question_fk]
           FROM    [forum_ResAnal].[dbo].[vr___01_cDB_Long__NoAggregated]
          WHERE    [entity]         = ''Prov''
            AND    [Question_Year]  < 2012                             )  D2
   ON      D1.[QY]
         = D2.[Question_Year]
LEFT JOIN
(
SELECT
       [Nation_fk]
      ,[Region5]
      ,[Region6]
      ,[Ctry_EditorialName]
      ,[Question_Year]
      ,[QA_std]
      ,[QW_std]
      ,[Answer_value]         = SUM([Answer_value])
      ,[answer_wording]       = STUFF(
                                      ( SELECT 
                                                ''|''
                                              + ISNULL([Answer_wording], '''')
                                         FROM         
                                                    ( SELECT *
                                                        FROM    [forum_ResAnal].[dbo].[vr___01_cDB_Long__NoAggregated]
                                                       WHERE    [entity]         = ''Prov''
                                                         AND    [Question_Year]  < 2012                             )  S2
                                        WHERE      S1.[Nation_fk]
                                                 = S2.[Nation_fk]
                                             AND   S1.[Question_Year]
                                                 = S2.[Question_Year]
                                             AND   S1.[QA_std]
                                                 = S2.[QA_std]
                                     FOR XML PATH('''') ), 1, 1, '''')
      ,[answer_wording_std]
      ,[Question_fk]
  FROM 
       ( SELECT *
           FROM    [forum_ResAnal].[dbo].[vr___01_cDB_Long__NoAggregated]
          WHERE    [entity]         = ''Prov''
            AND    [Question_Year]  < 2012                             )  S1
GROUP BY
          [Nation_fk]
        , [Region5]
        , [Region6]
        , [Ctry_EditorialName]
        , [Question_Year]
        , [QA_std]
        , [QW_std]
        , [answer_wording_std]
        , [Question_fk]
                                                                                                                                                    )  D3
   ON      D1.[Nation_fk]
         = D3.[Nation_fk]
  AND      D2.[Question_Year]
         = D3.[Question_Year]
  AND      D2.[QA_std]
         = D3.[QA_std]
  AND      D2.[QW_std]
         = D3.[QW_std]
'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*************************************************************************************************************************************  province data PDAbC  ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***     <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<     ***/
/***************************************************************************************************************************************************************/


/***************************************************************************************************************************************************************/
set     @MYCODE3 = 
/***     >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>     ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***************************************************************************************************************************************************************/
/*** > ACVbC other aggregated and calculated variables by country  *********************************************************************************************/
---   Long set of data aggregating both numeric values and descriptive wordings.
/***************************************************************************************************************************************************************/
/*** > major select statement for ACVbC  ***********************************************************************************************************************/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
N'
SELECT
        [ValSource] =   ''vr05WCY''
--    ,                        ACVC.[QA_link]
--    ,                        ACVC.[AV_link]
      , [entity]             = ''Calculated & Aggregated variables''
      , [note]               = ''updated on '' + CONVERT(VARCHAR(11),GETDATE(),9) + '' --  this field should NOT be edited''
      , [link_fk]            = NULL
      , [Nation_fk]          =       ACVC.[Nation_fk]
      , [Locality_fk]        = NULL
      , [Religion_fk]        = NULL
      , [Region5]            =       ACVC.[Region5]
      , [Region6]            =       ACVC.[Region6]
      , [Ctry_EditorialName] =       ACVC.[Ctry_EditorialName]
      , [Locality]           = ''not detailed''
      , [Religion]           = ''not detailed''
      , [Question_Year]      =       ACVC.[Question_Year]
      , [QA_std]             =       ACVC.[QA_std]
      , [QW_std]             =       QAWD.[QW_std]
 --   , [Answer_value]       =       ACVC.[Answer_value]
      , [Answer_value]       =  CAST(ACVC.[Answer_value] AS nvarchar)
      , [Answer_wording]     = ''aggregated value: not detailed''
      , [Answer_wording_std] =       QAWD.[AW_std]
      , [Question_fk]        =  NULL
      , [Answer_fk]          =  NULL
      , [Notes]              = ''not detailed''
      , [CntWg]              = 1
FROM
'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*** < major select statement fro ACVbC  ***********************************************************************************************************************/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*** >                                .  ***********************************************************************************************************************/
/*=============================================================================================================================================================*/
                                                                                /*** begining of query Lev2 enclosed between parenthesis                     ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
N'
/*-------------------------------------------------------------------------------------------------------------------------------------------------------------*/
( SELECT
         [AV_link] = CASE 
                          WHEN [Answer_value] >= 2
                           AND [QA_std]        = ''GRI_19_x''
                          THEN  1
                          WHEN [QA_std]        = ''GRI_20''
                          THEN  0
                          WHEN [Answer_value] >= 2
                           AND [QA_std]        = ''SHI_01_x''
                          THEN  1

                          ELSE [Answer_value]            END

      ,  [QA_link] = [QA_std]
          /*   CASE 
                  WHEN                 [QA_std] LIKE ''%_ny%'' 
                  THEN STUFF(          [QA_std]      ,         
                  ((CHARINDEX(''_ny'', [QA_std])) + 3) , 1, '''')
                  ELSE                 [QA_std]
                  END  */
       , *
    FROM  [forum_ResAnal].[dbo].[vr___03_cDB_W&Xtra_byCtry&Year]   SWCY
'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
N'  UNPIVOT  '
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                /*** beginning of unpivoting specifications                                  ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
N'
  (
     [Answer_value]
FOR
     [QA_std]
'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                /*** beginning of listing of variables                                       ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
N'
in (
'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-- select                                                                       /*** SELECT statement to TEST stuffing procedure...                          ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-- select                                                                       /*** SELECT statement to TEST stuffing procedure...                          ***/
/*** List variables: Begin stuffing function to remove the first comma in the list to be retrieved (parenthesis not needed) ************************************/
STUFF(                                                                          /*** begining of the "stuff: function                                        ***/
/***************************************************************************************************************************************************************/
(                                                                                /*** parenthesis to include query for the cell to be stuffed                ***/
/***************************************************************************************************************************************************************/
/*** Begin selection (into text, in a cell) of a comma delimited list of fields from a system view *************************************************************/
/***************************************************************************************************************************************************************/
    SELECT                                                                      /*** SELECT statement                                                        ***/
          ', '                                                                  /*** comma delimiter                                                         ***/
        +                                                                       /*** concatenated to...                                                      ***/
          [COLUMN_NAME]                                                         /*** field in system view which includes all field names                     ***/
    FROM                                                                        /*** from...                                                                 ***/
          [INFORMATION_SCHEMA].[COLUMNS]                                  TabA  /*** name of the system view which includes all field names                  ***/
	LEFT JOIN                                                                   /*** joined to a query...                                                    ***/
		( SELECT DISTINCT                                                       /*** SELECT (+ DISTINCT) statement                                           ***/
					[QA_std]                                                       /*** all variable names before aggregating data                              ***/
			FROM [forum_ResAnal].[dbo].[vr___01_cDB_Long__NoAggregated] ) TabB  /*** from NPR long view which includes all original variables' names         ***/
		ON                  [COLUMN_NAME] = [QA_std]                              /*** matching by field/variable names                                        ***/
	WHERE                                                                       /*** begining of filters to be applied...                                    ***/
          [TABLE_NAME]  = 'vr___03_cDB_W&Xtra_byCtry&Year'                      /*** TO INCLUDE ONLY desired view including calculated/aggegated fields      ***/
    AND                                                                         /*** second filter to be applied...                                          ***/
          [QA_std]         IS NULL                                              /*** new calculated/aggegated fields do not match                            ***/
    AND                                                                         /*** third filter to be applied...                                           ***/
          [COLUMN_NAME]    NOT IN (                                             /*** exclude field names not correspnding to calculated/aggegated vars       ***/
                                     'Nation_fk'                                /*** ...                                                                     ***/
                                   , 'Ctry_EditorialName'                       /*** ...                                                                     ***/
                                   , 'Question_Year'                            /*** ...                                                                     ***/
                                   , 'Region5'                                  /*** ...                                                                     ***/
                                   , 'Region6'                                  /*** ...                                                                     ***/
                             --    , 'UN_TotalPopulation'                       /*** ...  not added yet - 2016/01/14                                         ***/
                                   , 'GFI'                                      /*** ...  DECIMAL(38,32)  instead of  (38,2)                                 ***/
                                   , 'GRI'                                      /*** ...  DECIMAL(38,32)  instead of  (38,2)                                 ***/
                                   , 'SHI'                                      /*** ...  DECIMAL(38,32)  instead of  (38,2)                                 ***/
                                   , 'GFI_rd_1d'                                /*** ...  DECIMAL(38,1)   instead of  (38,2)                                 ***/
                                   , 'GRI_rd_1d'                                /*** ...  DECIMAL(38,1)   instead of  (38,2)                                 ***/
                                   , 'SHI_rd_1d'                                /*** ...  DECIMAL(38,1)   instead of  (38,2)                                 ***/
                                                                         )      /*** end of third filter                                                     ***/
    AND                                                                         /*** fourth filter - case 1 - to be applied...                               ***/
          [COLUMN_NAME]    NOT LIKE  '%_ny1'                                    /*** exclude field names for extra detailed y (1) from n/y distributions     ***/
    AND                                                                         /*** fourth filter - case 2 - to be applied...                               ***/
          [COLUMN_NAME]    NOT LIKE  '%_ny2'                                    /*** exclude field names for extra detailed y (2) from n/y distributions     ***/
    AND                                                                         /*** fourth filter - case 3 - to be applied...                               ***/
          [COLUMN_NAME]    NOT LIKE  '%_ny3'                                    /*** exclude field names for extra detailed y (3) from n/y distributions     ***/
    AND                                                                         /*** fourth filter - case @ - to be applied...                               ***/
          [COLUMN_NAME]    NOT LIKE  '%_summ%_ny[a-f]'                 /*** exclude field names for extra detailed y (@) from n/y distributions     ***/
    FOR XML PATH('')                                                            /*** Modifies the selected rowset nesting all cells into an XML string cell  ***/
/***************************************************************************************************************************************************************/
/*** End of the selection (into text, in a cell) of a comma delimited list of fields ***************************************************************************/
/***************************************************************************************************************************************************************/
)                                                                               /*** parenthesis to include query for the cell to be stuffed                 ***/
/***************************************************************************************************************************************************************/
, 1, 1, '')                                                                     /*** from STUFF: from position 1, change 1 character into ''                 ***/
/****************************************************************************************************************************** stuffing function ends here! ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
N' 
   )    '
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                /*** end of listing of variables                                             ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
N'    )                                                         AS   MUPV    '
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                /*** end (& alias) of unpivoting specifications                              ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
N'
                                                                                                                                                     )  AS ACVC
/*-------------------------------------------------------------------------------------------------------------------------------------------------------------*/
'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                /*** end & alias of query Lev2 enclosed between parenthesis                  ***/
/*=============================================================================================================================================================*/
/*** <                                .  ***********************************************************************************************************************/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
N'LEFT JOIN'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*** >                                .  ***********************************************************************************************************************/
/*=============================================================================================================================================================*/
                                                                                /*** begining of query Lev2 enclosed between parenthesis                     ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
N'
/*-------------------------------------------------------------------------------------------------------------------------------------------------------------*/
( SELECT 
         [QAStd_pk]
       , [QA_std]    = [Question_abbreviation_std]
       , [QW_std]    = [Question_wording_std]
       , [QsWstd]    = [Question_short_wording_std]
       , [AV_std]    = [Answer_value_std]
       , [AW_std]    = [Answer_Wording_std]
    FROM
         [forum].[dbo].[Pew_Q&A_Std]
   WHERE
         [Question_abbreviation_std] LIKE ''[S,G,X][F,H,R,S]%''                                                                  )  AS QAWD
/*-------------------------------------------------------------------------------------------------------------------------------------------------------------*/
'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                /*** end & alias of query Lev2 enclosed between parenthesis                  ***/
/*=============================================================================================================================================================*/
/*** <                                .  ***********************************************************************************************************************/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
N' ON
     (       ACVC.[QA_link]
           = QAWD.[QA_std]
       AND   ACVC.[AV_link]
           = QAWD.[AV_std]         )
/*-------------------------------------------------------------------------------------------------------------------------------------------------------------*/
'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/************************************************************************************************************************  aggregated/calculated data ACVbC  ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***     <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<     ***/
/***************************************************************************************************************************************************************/


/***************************************************************************************************************************************************************/
set     @MYCODE4 = 
/***     >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>     ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***************************************************************************************************************************************************************/
/*** > uIbCR (unrounded) indexes aggregated by country and median indexes by regions  **************************************************************************/
---   Long set of data coming directly from set of indexes.
/***************************************************************************************************************************************************************/
/*** > major select statement for uIbCR  ***********************************************************************************************************************/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
N'
SELECT
        [ValSource] =   ''vr04uICY''
      , [entity]             = ''Indexes & Median Indexes''
      , [note]               = ''updated on '' + CONVERT(VARCHAR(11),GETDATE(),9) + '' --  this field should NOT be edited''
      , [link_fk]            = NULL
      , [Nation_fk]          =       [Nation_fk]
      , [Locality_fk]        = NULL
      , [Religion_fk]        = NULL
      , [Region5]            =       [Region5]
      , [Region6]            =       [Region6]
      , [Ctry_EditorialName] =       [Ctry_EditorialName]
      , [Locality]           = ''not detailed''
      , [Religion]           = ''not detailed''
      , [Question_Year]      =       [Year]
      , [QA_std]             =       [Index_abbreviation]
      , [QW_std]             =       [Index_name]
      , [Answer_value]       =  CASE
                                    WHEN                                       [Index_value]                       =  0    THEN  ''0''
                                    WHEN                                       [Index_value]                       = 10    THEN ''10''
                                    ELSE LEFT                           ((CAST([Index_value] AS nvarchar(max))), 
                                          (LEN                          ((CAST([Index_value] AS nvarchar(max))))
                                           - PATINDEX(''%[1-9]%'', REVERSE((CAST([Index_value] AS nvarchar(max))))) + 1)  )
                                    END
      , [Answer_wording]     = ''not detailed''
      , [Answer_wording_std] = ''scale 0 - [+.] - 10''
      , [Question_fk]        =  NULL
      , [Answer_fk]          =  NULL
      , [Notes]              = ''not detailed''
      , [CntWg]              = 1
FROM
        [vr_04w_R&H_Index_by_CtryRegion&Yr]
'
/********************************************************************************************************  country indexes & by region median indexes uIbCR  ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***     <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<     ***/
/***************************************************************************************************************************************************************/


/***************************************************************************************************************************************************************/
set     @MYCODE5 = 
/***     >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>     ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***************************************************************************************************************************************************************/
/*** > RIbCR indexes aggregated by country and median indexes by regions (rounded to one decimal)  *************************************************************/
---   Long set of data coming directly from set of indexes.
/***************************************************************************************************************************************************************/
/*** > major select statement for RIbCR  **********************************************************************************************************************/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
N'
SELECT
        [ValSource] =   ''vr04RICY''
      , [entity]             = ''Indexes & Median Indexes''
      , [note]               = ''updated on '' + CONVERT(VARCHAR(11),GETDATE(),9) + '' --  this field should NOT be edited''
      , [link_fk]            = NULL
      , [Nation_fk]          =       [Nation_fk]
      , [Locality_fk]        = NULL
      , [Religion_fk]        = NULL
      , [Region5]            =       [Region5]
      , [Region6]            =       [Region6]
      , [Ctry_EditorialName] =       [Ctry_EditorialName]
      , [Locality]           = ''not detailed''
      , [Religion]           = ''not detailed''
      , [Question_Year]      =       [Year]
      , [QA_std]             =       [Index_abbreviation] + ''_rd_1d''
      , [QW_std]             =       [Index_name]         + '' (rounded to one decimal)''
      , [Answer_value]       =  CAST([I_Rounded_value] AS nvarchar)
      , [Answer_wording]     = ''not detailed''
      , [Answer_wording_std] = ''scale 0.0 - [+.1] - 10.0''
      , [Question_fk]        =  NULL
      , [Answer_fk]          =  NULL
      , [Notes]              = ''not detailed''
      , [CntWg]              = 1
FROM
        [vr_04w_R&H_Index_by_CtryRegion&Yr]
'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/************************************************************************************************  rounded country indexes & by region median indexes RIbCR  ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***     <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<     ***/
/***************************************************************************************************************************************************************/


/***************************************************************************************************************************************************************/
set     @ENDCODE = 
/***     >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>    >>>     ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*** > (finalize seleccion from) ALL SETS OF DATA  *************************************************************************************************************/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
N'
)  ASoD
)  FormerView
'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/*** < (finalize seleccion from) ALL SETS OF DATA  *************************************************************************************************************/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***     <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<    <<<     ***/
/***************************************************************************************************************************************************************/


/***************************************************************************************************************************************************************/
set     @ALLCODE = 
/***     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
        @CODEBEG                                                    /***                - initial code -                                                     ***/
    +   @MYCODE1                                                    /***   NPR          [vr_01w_DB_Long_NoAggregated]            ------>     170,623         ***/
    + N'UNION ALL'                                                  /***                - link -                                                             ***/
    +   @MYCODE2                                                    /***   PDAbC       *Province, aggregated by Country          ------>      27,608         ***/
    + N'UNION ALL'                                                  /***                - link -                                                             ***/
    +   @MYCODE3                                                    /***   ACVbC       *Calculated & Aggregated variables        ------>      78,908         ***/
    + N'UNION ALL'                                                  /***                - link -                                                             ***/
    +   @MYCODE4                                                    /***   uIbCR       *Country & Region (unrounded) indexes     ------>       4,398         ***/
    + N'UNION ALL'                                                  /***                - link -                                                             ***/
    +   @MYCODE5                                                    /***   RIbCR       *Country & Region rounded indexes (.X)    ------>       4,398         ***/
    +   @ENDCODE                                                    /***                - final code -                                                       ***/
                                                                    /***                                                                     285,935         ***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
/***     <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<     ***/
/***************************************************************************************************************************************************************/
/*** This is a way for checking the SQL statement that has been stored as a string variable ********************************************************************/
--	EXEC dbo.LongPrint @CODEBEG                                     /***        display the currently stored code (to be executed)                           ***/
--	EXEC dbo.LongPrint @MYCODE1                                     /***        display the currently stored code (to be executed)                           ***/
--	EXEC dbo.LongPrint @MYCODE2                                     /***        display the currently stored code (to be executed)                           ***/
	EXEC dbo.LongPrint @MYCODE3                                     /***        display the currently stored code (to be executed)                           ***/
--	EXEC dbo.LongPrint @MYCODE4                                     /***        display the currently stored code (to be executed)                           ***/
--	EXEC dbo.LongPrint @MYCODE5                                     /***        display the currently stored code (to be executed)                           ***/
--	EXEC dbo.LongPrint @ENDCODE                                     /***        display the currently stored code (to be executed)                           ***/
/***************************************************************************************************************************************************************/
--	EXEC dbo.LongPrint @ALLCODE                                     /***        display the currently stored code (to be executed)                           ***/
/***************************************************************************************************************************************************************/
--	EXEC              (@MYCODE1)                                    /***        ... partial excecution ...                                                   ***/
--	EXEC              (@MYCODE2)                                    /***        ... partial excecution ...                                                   ***/
--	EXEC              (@MYCODE3)                                    /***        ... partial excecution ...                                                   ***/
--	EXEC              (@MYCODE4)                                    /***        ... partial excecution ...                                                   ***/
--	EXEC              (@MYCODE5)                                    /***        ... partial excecution ...                                                   ***/
/***************************************************************************************************************************************************************/
--		EXEC dbo.LongPrint @ALLCODE                                 /***        display the currently stored code (to be executed)                           ***/
/***************************************************************************************************************************************************************/
/*** The complete SQL statement stored as a string variable is executed as a character string ******************************************************************/
/***************************************************************************************************************************************************************/
/***************************************************************************************************************************************************************/
/***                                                                                                                                                         ***/
--		EXEC  (@ALLCODE)
/***                                                                                                                                                         ***/
/***************************************************************************************************************************************************************/
 
 
 
 
/***                                                                           -o-                                                                           ***/   
 
 
 
 
/***=========================================================================================================================================================***/   
/*** ------------------------------------------------------------------------------------------------------------------------------------------------------- ***/   
 
 
 
  _006_lt__PubSelVarDat___R.sql                                                                                                                                    
 
 
 
/*** ------------------------------------------------------------------------------------------------------------------------------------------------------- ***/   
/***=========================================================================================================================================================***/   
 
 
/***************************************************************************************************************************************************************/
Print 
'--- ' + CONVERT (VARCHAR(19), SYSDATETIME()) + ' ==>  script 00_    ------------------------------------------------------------------------------------------ '


--- can be recoded using metacode


/***************************************************************************************************************************************************************/
/***                                                                                                                                                         ***/
/***     >>>>>   This is the script used to create the lookup table [forum_ResAnal].[dbo].[vrp__01_cDB_SelDataBYCtry&Year]                         <<<<<     ***/
/***             This table filters selected values from [vr___03_cDB_W&Xtra_byCtry&Year] aggregated by country/religion & year                              ***/
/***             The data will be available for public download                                                                                              ***/
/***                                                                                                                                                         ***/
/***                                                      > > >     lookup tables work faster     < < <                                                      ***/
/***                                                                                                                                                         ***/
/***************************************************************************************************************************************************************/
USE [forum_ResAnal]
GO
/***************************************************************************************************************************************************************/
IF OBJECT_ID  (N'[forum_ResAnal].[dbo].[vrp__01_cDB_SelDataBYCtry&Year]', N'U') IS NOT NULL
DROP TABLE       [forum_ResAnal].[dbo].[vrp__01_cDB_SelDataBYCtry&Year]
SELECT * INTO    [forum_ResAnal].[dbo].[vrp__01_cDB_SelDataBYCtry&Year]
FROM
/*-------------------------------------------------------------------------------------------------------------------------------------------------------------*/
(
/*=============================================================================================================================================================*/
   SELECT
/*-------------------------------------------------------------------------------------------------------------------------------------------------------------*/
          [Nation_fk]
         ,[Region5]
         ,[Region6]
         ,[Ctry_EditorialName]
         ,[Question_Year]
/*-------------------------------------------------------------------------------------------------------------------------------------------------------------*/
         ,[GRI_Q_1]                        = [GRI_01]
         ,[GRI_Q_2]                        = [GRI_02]
         ,[GRI_Q_3]                        = [GRI_03]
         ,[GRI_Q_4]                        = [GRI_04]
         ,[GRI_Q_5]                        = [GRI_05]
         ,[GRI_Q_6]                        = [GRI_06]
         ,[GRI_Q_7]                        = [GRI_07]
         ,[GRI_Q_8]                        = [GRI_08_for_index]
         ,[GRI_Q_9]                        = [GRI_09]
         ,[GRI_Q_10]                       = [GRI_10]
         ,[GRI_Q_11]                       = [GRI_11]
         ,[GRI_Q_11_Christianity]          = [GRI_11_xG1]
         ,[GRI_Q_11_Islam]                 = [GRI_11_xG2]
         ,[GRI_Q_11_Buddhism]              = [GRI_11_xG3]
         ,[GRI_Q_11_Hinduism]              = [GRI_11_xG4]
         ,[GRI_Q_11_Judaism]               = [GRI_11_xG5]
         ,[GRI_Q_11_Folk_Religions]        = [GRI_11_xG7]
         ,[GRI_Q_11_Other_Religions]       = [GRI_11_xG6]
         ,[GRI_Q_12]                       = [GRI_12]
         ,[GRI_Q_13]                       = [GRI_13]
         ,[GRI_Q_14]                       = [GRI_14]
         ,[GRI_Q_15]                       = [GRI_15]
         ,[GRI_Q_16]                       = [GRI_16_ny]       * 100  --   fromerly rescaled [GRI_16_ny1]
         ,[GRI_Q_16_reasons]               = [GRI_16]
         ,[GRI_Q_17]                       = [GRI_17]
         ,[GRI_Q_18]                       = [GRI_18]
         ,[GRI_Q_19]                       = [GRI_19_ny]       * 100  --   fromerly rescaled [GRI_19_ny1]
         ,[GRI_Q_19_extent]                = [GRI_19]
         ,[GRI_Q_19_Abuse]                 = [GRI_19_e_scaled]
         ,[GRI_Q_19_Deaths]                = [GRI_19_f_scaled]
         ,[GRI_Q_19_Displacements]         = [GRI_19_d_scaled]
         ,[GRI_Q_19_Detentions]            = [GRI_19_c_scaled]
         ,[GRI_Q_19_Property_Damage]       = [GRI_19_b_scaled]
         ,[GRI_Q_20_1]                     = [GRI_20_01]
         ,[GRI_Q_20_2]                     = [GRI_20_02]
         ,[GRI_Q_20_3]                     = [GRI_20_03_top]
         ,[GRI_Q_20_3_a]                   = [GRI_20_03_a]
         ,[GRI_Q_20_3_b]                   = [GRI_20_03_b]
         ,[GRI_Q_20_3_c]                   = [GRI_20_03_c]
         ,[GRI_Q_20_4]                     = [GRI_20_04]
         ,[GRI_Q_20_5]                     = [GRI_20_05]
         ,[SHI_Q_1_Harassment]             = [SHI_01_a_dummy]
         ,[SHI_Q_1_PropertyDamage]         = [SHI_01_b_dummy]
         ,[SHI_Q_1_Detentions]             = [SHI_01_c_dummy]
         ,[SHI_Q_1_Displacements]          = [SHI_01_d_dummy]
         ,[SHI_Q_1_Assaults]               = [SHI_01_e_dummy]
         ,[SHI_Q_1_Deaths]                 = [SHI_01_f_dummy]
         ,[SHI_Q_1_Extent]                 = [SHI_01]
         ,[SHI_Q_1_harass_Christianity]    = [SHI_01_xG1]
         ,[SHI_Q_1_harass_Islam]           = [SHI_01_xG2]
         ,[SHI_Q_1_harass_Buddhism]        = [SHI_01_xG3]
         ,[SHI_Q_1_harass_Hinduism]        = [SHI_01_xG4]
         ,[SHI_Q_1_harass_Judaism]         = [SHI_01_xG5]
         ,[SHI_Q_1_harass_Folk_Religions]  = [SHI_01_xG7]
         ,[SHI_Q_1_harass_Other_Religions] = [SHI_01_xG6]
         ,[SHI_Q_2]                        = [SHI_02]
         ,[SHI_Q_3]                        = [SHI_03]
         ,[SHI_Q_4]                        = [SHI_04_ny]       * 100  --   fromerly rescaled [SHI_04_ny0]
         ,[SHI_Q_4_extent]                 = [SHI_04]
         ,[SHI_Q_5]                        = [SHI_05_ny]       * 100  --   fromerly rescaled [SHI_05_ny0]
         ,[SHI_Q_5_extent]                 = [SHI_05]
         ,[SHI_Q_6]                        = [SHI_06]
         ,[SHI_Q_7]                        = [SHI_07]
         ,[SHI_Q_8]                        = [SHI_08]
         ,[SHI_Q_9]                        = [SHI_09]
         ,[SHI_Q_10]                       = [SHI_10]
         ,[SHI_Q_11]                       = [SHI_11_for_index]
         ,[SHI_Q_12]                       = [SHI_12]
         ,[SHI_Q_13]                       = [SHI_13]
         ,[GRX_22_blasphemy]               = [GRX_22_01_ny]    * 100  --   fromerly rescaled [GRX_22_01_ny1]
         ,[GRX_22_apostasy]                = [GRX_22_02_ny]    * 100  --   fromerly rescaled [GRX_22_02_ny1]
         ,[GRX_22_hate_speech]             = [GRX_22_03_ny]    * 100  --   fromerly rescaled [GRX_22_03_ny1]
         ,[GRX_22_criticism_of_religion]   = [GRX_22_04_ny]    * 100  --   fromerly rescaled [GRX_22_04_ny1]
         ,[GRX_30]                         = [GRX_30]
/*-------------------------------------------------------------------------------------------------------------------------------------------------------------*/
FROM
                 [forum_ResAnal].[dbo].[vr___03_cDB_W&Xtra_byCtry&Year]
/*=============================================================================================================================================================*/
                                                                                     ) SelPubDS
/*-------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/***************************************************************************************************************************************************************/
 
 
 
 
/***                                                                           -o-                                                                           ***/   
 
